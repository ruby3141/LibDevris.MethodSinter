using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Devris.LibDevris.MethodSinter.Generator
{
    [Generator]
    public class SinteredMethodGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var sinteredMethodProvider =
                context.SyntaxProvider.ForAttributeWithMetadataName("Devris.LibDevris.MethodSinter.SinteredMethodAttribute",
                    predicate: static (s, _) => s is MethodDeclarationSyntax mds && mds.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)),
                    transform: static (gac, _) => (
                        Identifier: (string)gac.Attributes.Single().ConstructorArguments.Single().Value,
                        TargetNode: (MethodDeclarationSyntax)gac.TargetNode));

            var methodFragmentProvider =
                context.SyntaxProvider.ForAttributeWithMetadataName("Devris.LibDevris.MethodSinter.MethodFragmentAttribute",
                    predicate: static (s, _) => s is MethodDeclarationSyntax,
                    transform: static (gac, _) => (
                        Identifier: (string)gac.Attributes.Single().ConstructorArguments.Single().Value,
                        TargetNode: (MethodDeclarationSyntax)gac.TargetNode))
                    .Collect();

            var targetProvider = sinteredMethodProvider.Combine(methodFragmentProvider);

            context.RegisterSourceOutput(targetProvider, GenerateSintered);
        }

        private void GenerateSintered(
            SourceProductionContext context,
            ((string Identifier, MethodDeclarationSyntax TargetNode) Method, ImmutableArray<(string Identifier, MethodDeclarationSyntax TargetNode)> Fragments) source)
        {
            var usings = source.Method.TargetNode.FirstAncestorOrSelf<CompilationUnitSyntax>().Usings
                .Select(u => u.ToString()).Where(s => string.IsNullOrWhiteSpace(s) == false);

            string namespaceName = source.Method.TargetNode.FirstAncestorOrSelf<NamespaceDeclarationSyntax>().Name.ToString();
            string className = source.Method.TargetNode.FirstAncestorOrSelf<ClassDeclarationSyntax>().Identifier.Text;
            var modifiers = source.Method.TargetNode.Modifiers;
            string methodName = source.Method.TargetNode.Identifier.Text;
            var inputParameters = source.Method.TargetNode.ParameterList.Parameters
                .Select(p => p.Modifiers.ToString() switch
                    {
                        "params" or "" => p.Identifier.Text,
                        "ref readonly" => $"in {p.Identifier.Text}",
                        var mod => $"{mod} {p.Identifier.Text}"
                    });

            context.AddSource($"{className}.{source.Method.Identifier}.g.cs",
$@"// <auto-generated />
{string.Join("\r\n", usings)}

namespace {namespaceName}
{{
    partial class {className}
    {{
        {modifiers} void {methodName}{string.Join(", ", source.Method.TargetNode.ParameterList)}
        {{
            {string.Join("\r\n            ", source.Fragments
                .Where(f => f.Identifier == source.Method.Identifier)
                .Select(f => $"{f.TargetNode.Identifier.Text}({string.Join(", ", inputParameters)});"))}
        }}
    }}
}}
");
        }
    }
}
